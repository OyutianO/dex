# DEPRECATED: use config.yaml.dist and config.dev.yaml examples in the repository root.
# TODO: keep this until all references are updated.

# The base path of dex and the external name of the OpenID Connect service.
# This is the canonical URL that all clients MUST use to refer to dex. If a
# path is provided, dex's HTTP service will listen at a non-root URL.
issuer: http://47.100.113.76:5556/dex

# The storage configuration determines where dex stores its state. Supported
# options include SQL flavors and Kubernetes third party resources.
#
# See the documentation (https://dexidp.io/docs/storage/) for further information.
storage:
  type: sqlite3
  config:
    file: ../../examples/dex.db 

  # type: mysql
  # config:
  #   host: localhost
  #   port: 3306
  #   database: dex
  #   user: mysql
  #   password: mysql
  #   ssl:
  #     mode: "false"

  # type: postgres
  # config:
  #   host: localhost
  #   port: 5432
  #   database: dex
  #   user: postgres
  #   password: postgres
  #   ssl:
  #     mode: disable

  # type: etcd
  # config:
  #   endpoints:
  #     - http://localhost:2379
  #   namespace: dex/

  # type: kubernetes
  # config:
  #   kubeConfigFile: $HOME/.kube/config

# Configuration for the HTTP endpoints.
web:
  http: 0.0.0.0:5556
  # Uncomment for HTTPS options.
  # https: 127.0.0.1:5554
  # tlsCert: /etc/dex/tls.crt
  # tlsKey: /etc/dex/tls.key

# Configuration for dex appearance
frontend:
  issuer: dex
  logoURL: ../../theme/logo.png
  dir: ../../web/
  theme: light

# Configuration for telemetry
telemetry:
  http: 0.0.0.0:5558
  # enableProfiling: true

# Uncomment this block to enable the gRPC API. This values MUST be different
# from the HTTP endpoints.
# grpc:
#   addr: 127.0.0.1:5557
#   tlsCert: examples/grpc-client/server.crt
#   tlsKey: examples/grpc-client/server.key
#   tlsClientCA: examples/grpc-client/ca.crt

# Uncomment this block to enable configuration for the expiration time durations.
# Is possible to specify units using only s, m and h suffixes.
# expiry:
#   deviceRequests: "5m"
#   signingKeys: "6h"
#   idTokens: "24h"
#   refreshTokens:
#     reuseInterval: "3s"
#     validIfNotUsedFor: "2160h" # 90 days
#     absoluteLifetime: "3960h" # 165 days

# Options for controlling the logger.
# logger:
#   level: "debug"
#   format: "text" # can also be "json"

# Default values shown below
# oauth2:
#     #use ["code", "token", "id_token"] to enable implicit flow for web-only clients
#   responseTypes: [ "code" ] # also allowed are "token" and "id_token"
#     #By default, Dex will ask for approval to share data with application
#     #(approval for sharing data from connected IdP to Dex is separate process on IdP)
#   skipApprovalScreen: true
#     #If only one authentication method is enabled, the default behavior is to
#    # go directly to it. For connected IdPs, this redirects the browser away
#     #from application to upstream provider such as the Google login page
#   alwaysShowLoginScreen: false
#    # Uncomment the passwordConnector to use a specific connector for password grants
#   passwordConnector: local
#   skipApproval: true

# Instead of reading from an external storage, use this list of clients.
#
# If this option isn't chosen clients may be added through the gRPC API.
staticClients:
- id: example-app
  redirectURIs:
  - 'http://47.100.113.76:5555/callback'
  name: 'Example App'
  secret: ZXhhbXBsZS1hcHAtc2VjcmV0
  public: false

#  - id: example-device-client
#    redirectURIs:
#      - /device/callback
#    name: 'Static Client for Device Flow'
#    public: true
connectors:
# - type: mockCallback
#   id: mock
#   name: Example
- type: ubiucp
  id: ubiucp
  name: UbiUCP
  config:
    authURL: http://47.100.113.76:8080/auth
# - type: gitlab
#   id: gitlab
#   name: Gitlab
#   config:
#       # optional, default = https://gitlab.com
#     baseURL: https://gitlab.com
#     #issuer: https://gitlab.com
#       # Credentials can be string literals or pulled from the environment.
#     clientID: 7d9ef66cd6c9133b27fda315719a45b43e8ccd3714857eabac421f72cdd84088
#     clientSecret: 51d1f031f7261d793e59a180671344d6cfc8f827380197e540ee01235f031676
#     redirectURI: http://47.100.113.76:5556/dex/callback
#       # Optional groups whitelist, communicated through the "groups" scope.
#       # If `groups` is omitted, all of the user's GitLab groups are returned when the groups scope is present.
#       # If `groups` is provided, this acts as a whitelist - only the user's GitLab groups that are in the configured `groups` below will go into the groups claim.  Conversely, if the user is not in any of the configured `groups`, the user will not be authenticated.
#     groups:
#     - ubiquant-lyin
#     - OyutianO
#       # flag which will switch from using the internal GitLab id to the users handle (@mention) as the user id.
#       # It is possible for a user to change their own user name but it is very rare for them to do so
#     useLoginAsID: true

# - type: google
#   id: google
#   name: Google
#   config:
#     issuer: https://accounts.google.com
#     # Connector config values starting with a "$" will read from the environment.
#     clientID: $GOOGLE_CLIENT_ID
#     clientSecret: $GOOGLE_CLIENT_SECRET
#     redirectURI: http://127.0.0.1:5556/dex/callback
#     hostedDomains:
#     - $GOOGLE_HOSTED_DOMAIN

# Let dex keep a list of passwords which can be used to login to dex.
# enablePasswordDB: true

# A static list of passwords to login the end user. By identifying here, dex
# won't look in its underlying storage for passwords.
#
# If this option isn't chosen users may be added through the gRPC API.
# staticPasswords:
# - email: "admin@example.com"
#   # bcrypt hash of the string "password": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2)
#   hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
#   username: "admin"
#   userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"

